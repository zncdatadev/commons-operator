---
apiVersion: v1
kind: ConfigMap
metadata:
  name: caddyfile
data:
  Caddyfile: |
    :80 {
      root * /wwwroot/
      file_server

      # read env basic auth snippet from https://caddyserver.com/docs/caddyfile/directives/http.basicauth
      {$BASIC_AUTH}

      respond "Welcome, {http.auth.user.id}" 200
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: basic-auth
type: Opaque
stringData:
  BASIC_AUTH: |
    basic_auth /auth/* {
      # Username "Bob", password "hiccup"
      Bob $2a$14$Zkx19XLiW6VYouLHR5NmfOFU0z2GTNmpkT/5qqR7hx4IjWJPDhjvG
    }
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: caddy
  labels:
    restarter.kubedoop.dev/enable: "true"
spec:
  serviceName: caddy
  replicas: 1
  selector:
    matchLabels:
      app: caddy
  template:
    metadata:
      labels:
        app: caddy
    spec:
      containers:
      - name: caddy
        image: caddy:2
        env:
        - name: BASIC_AUTH
          valueFrom:
            secretKeyRef:
              name: basic-auth
              key: BASIC_AUTH
        ports:
        - containerPort: 80
          name: http
        resources:
          limits:
            cpu: "500m"
            memory: "500Mi"
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 15
        volumeMounts:
        - name: caddyfile
          mountPath: /etc/caddy/Caddyfile
          subPath: Caddyfile
      volumes:
      - name: caddyfile
        configMap:
          name: caddyfile
---
apiVersion: v1
kind: Service
metadata:
  name: caddy
spec:
  selector:
    app: caddy
  ports:
  - name: http
    port: 80
    targetPort: http
  type: ClusterIP
---
apiVersion: v1
kind: Pod
metadata:
  name: assert-caddy-ready
spec:
  restartPolicy: Never
  containers:
  - name: assert-caddy
    image: registry.access.redhat.com/ubi9-minimal:latest
    resources:
      limits:
        memory: "100Mi"
        cpu: "100m"
    command:
    - sh
    - -c
    - |
      EXPECTED="Welcome,"
      while true; do
        ACTUAL=$(curl -s http://caddy:80)
        # check EXPECTED ~= ACTUAL
        if echo "$ACTUAL" | grep -q "$EXPECTED"; then
          echo "assertion passed"
          exit 0
        else
          echo "assertion failed"
          echo "EXPECTED: $EXPECTED"
          echo "ACTUAL: $ACTUAL"
          sleep 5
        fi
      done
